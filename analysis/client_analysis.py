#!/usr/bin/env python

import numpy as np
import time
import dpkt
import operator
import logging
from utils import ip_to_str, get_col, DuplicateFilter
from connection import TCPConnection

FIN = 0x01
SYN = 0x02
RST = 0x04
PSH = 0x08
ACK = 0x10
URG = 0x20
ECE = 0x40
CWR = 0x80

# keep a logger for debugging and info
logger = logging.getLogger(__name__)


def fill_connections(pz_cap, verbose=False, target_ips=set()):
    """
    In this case, I will treat retransmissions as separate connection
    class since we need to account for them in the analysis. I will always
    add the ACK received to the last sent SYN.

    @pz_cap: The pcap reader generated by dpkt
    @verbose: The level of logging to use
    @target_ips: A set containing some target ips to only generate connections for.
        If this set is empty, it is assumed that we should get the connections for
        everyone.

    @returns a multi-level dictionary that contains the connection for each of the
        ip addresses contained in target_ips, or everything if target_ips is empty.
        For each ip address, there is another dictionary indexed by the connection
        sequence number.
    """
    timing = {}
    expected_seq_num = {}

    # check what level of warnings we should use
    current_log_level = logger.getEffectiveLevel()
    if verbose:
        logger.setLevel(logging.DEBUG)
    duplicate_filter = DuplicateFilter()
    logger.addFilter(duplicate_filter)

    for ts, buf in pz_cap:
        try:
            eth = dpkt.ethernet.Ethernet(buf)
        except:
            continue

        if eth.type != dpkt.ethernet.ETH_TYPE_IP or \
                not isinstance(eth.data, dpkt.ip.IP):
            continue

        ip = eth.data

        if not isinstance(ip.data, dpkt.tcp.TCP):
            continue

        tcp = ip.data

        # First SYN packet
        if tcp.flags & SYN and not (tcp.flags & ACK):
            # pkt.display()
            src = ip_to_str(ip.src)

            # check if I am applying some filter over the nodes
            if len(target_ips) > 0 and src not in target_ips:
                continue

            if src not in timing:
                timing[src] = {}

            # print pkt[TCP].seq, pkt[TCP].ack
            if tcp.seq not in timing[src]:
                conn = TCPConnection(src, tcp.seq, ts, tcp.sport)
                timing[src][tcp.seq] = conn
            else:
                conn = timing[src][tcp.seq]
                # account for out of order recording
                if conn.syn_sent == 0:
                    conn.syn_sent = ts
                else:
                    conn.syn_retransmissions = np.append(conn.syn_retransmissions, ts)
                # OCD put back
                timing[src][tcp.seq] = conn

            # initialize one entry per (ip,port) pair from the source, capture expected sequence number
            if (src, tcp.sport) not in expected_seq_num:
                expected_seq_num[(src, tcp.sport)] = {}

        # Server response
        if tcp.flags & SYN and (tcp.flags & ACK):
            # handshake[ack - 1] = {ack:seq, t2: pkt.time }
            dst = ip_to_str(ip.dst)

            # check if I am applying some filter over the nodes
            if len(target_ips) > 0 and dst not in target_ips:
                continue

            if dst in timing:  # if we do not have a SYN we ignore it
                if (tcp.ack - 1) in timing[dst]:
                    # print pkt[TCP].seq, pkt[TCP].ack
                    conn = timing[dst][tcp.ack-1]
                    conn.synack_received = ts
                    timing[dst][tcp.ack-1] = conn
                else:
                    # account for out of order recording
                    # issue warning only one
                    logger.warning("Packets in cap file are out of order!")

                    conn = TCPConnection(dst, tcp.ack-1, 0, tcp.dport)
                    conn.synack_received = ts
                    timing[dst][tcp.ack-1] = conn
            else:
                logger.warning("Received SYNACK packet for non tracked host {}".format(dst))

        # Client response
        if (not (tcp.flags & SYN)) and (tcp.flags & ACK) and (not tcp.flags & FIN):
            src = ip_to_str(ip.src)

            # check if I am applying some filter over the nodes
            if len(target_ips) > 0 and src not in target_ips:
                continue

            if src in timing:
                # Reconstruct initial seq number
                if (tcp.seq - 1) in timing[src]:
                    conn = timing[src][tcp.seq - 1]
                    conn.ack_sent = ts
                    timing[src][tcp.seq - 1] = conn

                    # save the expected sequence number from the server to make sure the connection was not reset
                    if (src, tcp.sport) in expected_seq_num:
                        expected_seq_num[src, tcp.sport][tcp.ack] = conn
                else:
                    # handle out of order cap file
                    # NOTE: THIS WORKS FOR ATTACKERS BECAUSE THERE ARE NO APPLICATIONS BUT NOT GOOD CLIENTS
                    # THIS DOES NOT WORK.
                    logger.warning("Packets in cap file are out of order!")

                    conn = TCPConnection(src, tcp.seq - 1, 0, tcp.sport)
                    conn.ack_sent = ts
                    timing[src][tcp.seq-1] = conn

        # RST packets
        if tcp.flags & RST:
            dst = ip_to_str(ip.dst)

            # check if I am applying some filter over the nodes
            if len(target_ips) > 0 and dst not in target_ips:
                continue

            if dst in timing:
                # print "[Log:] Host %s received a RST packet from the server" % dst
                logger.debug("Host {} received a RST packet from the server".format(dst))
                if (dst, tcp.dport) not in expected_seq_num:
                    logger.warning("Malformed RST packet received for host {}".format(dst))
                elif tcp.seq in expected_seq_num[(dst, tcp.dport)]:
                    logger.debug("""Server reset connection after ACK establishment for host {}
                        At port number {} with expected sequence number {}""".format(dst, tcp.dport, tcp.seq))
                    conn = expected_seq_num[(dst, tcp.dport)][tcp.seq]
                    conn.setResetFlag(ts)
                else:
                    logger.warning("""Received RST packet for a non tracked connection at host {}.
                        This message will be printed once per host""".format(dst))
            else:
                logger.warning("Detected RST packet for non tracked host {}".format(dst))

    # reset the logger config
    logger.setLevel(current_log_level)
    logger.removeFilter(duplicate_filter)
    del duplicate_filter

    return timing


def compute_client_percentage(pcap_file, interval_s, verbose=False, target_ips=set()):
    """
    Compute the percentage of established connections for a given set of hosts or for
    all hosts seen in a certain in put pcap file.

    @pcap_file: the pcap file to parse
    @interval_s: the interval for which to compute the connection establishment rate
    @verbose: flood out the printing if true
    @target_ips: a set of ips targeted for the analysis. Runs for all ips if empty

    @returns A dictionary creating a mapping from each host to an array showing the
        observed connection establishment rate for each time interval
    """

    # check what level of warnings we should use
    current_log_level = logger.getEffectiveLevel()
    if verbose:
        logger.setLevel(logging.DEBUG)

    # Read the pcap file and then call the fill connections routine to obtain a classification
    # of the client (or all clients)' TCP connections observed in the file
    start_time = time.time()
    f = open(pcap_file)
    rcap = dpkt.pcap.Reader(f)
    end_time = time.time()
    logger.debug("Time to read pcap file {}".format(str(end_time-start_time)))

    timing = fill_connections(rcap, verbose, target_ips)

    client_percentage_connections = {}
    for host, conn_dict in timing.items():
        arr_percentage = np.array([[0,0]])
        start_ts = 0
        curr_bucket = 0
        num_attempted = 0
        num_acked = 0
        num_failed = 0
        num_synacked = 0
        sorted_items = sorted(conn_dict.values(), key=operator.attrgetter('syn_sent'))

        for conn in sorted_items:
            syn_sent = conn.syn_sent
            ack_sent = conn.ack_sent
            synack_received = conn.synack_received

            # check if the syn ack has been received
            if synack_received > 0:
                num_synacked += 1

            # check for the ack packets going for the FIN packets
            if conn.syn_sent == 0:
                # this is an FIN packet or an application packet
                continue

            if conn.syn_sent > 0:
                num_attempted += (1 + np.size(conn.syn_retransmissions))

            # check if the server dropped this connection
            if conn.IsDroppedByServer() or (conn.syn_sent > 0 and ack_sent == 0):
                num_failed += 1
            else:
                # count this as a completed connection, it is tricky though that
                # we do not know for sure what happened here, did it reach the
                # established state or did it have to timeout?
                num_acked += 1

            # ack has been sent, check which bucket we're counting
            if start_ts == 0:
                start_ts = syn_sent

            if (syn_sent - start_ts) > interval_s:
                skipped = int((syn_sent - start_ts)) / interval_s
                if skipped > 1:
                    filling = [[0, 0]] * (skipped - 1)
                    arr_percentage = np.vstack((arr_percentage, filling))
                curr_bucket += skipped - 1

                entry = [1, 0]
                if (not conn.IsDroppedByServer()) and (conn.ack_sent > 0):
                    entry = [1, 1]
                arr_percentage = np.vstack((arr_percentage, entry))
                curr_bucket += 1

                start_ts = start_ts + skipped * interval_s
                assert (syn_sent - start_ts < interval_s)
            else:
                entry = arr_percentage[curr_bucket]
                entry[0] += 1
                if (not conn.IsDroppedByServer()) and (conn.ack_sent > 0):
                    entry[1] += 1
                arr_percentage[curr_bucket] = entry

        client_percentage_connections[host] = arr_percentage
        avg_estab_rate = np.average(get_col(arr_percentage, 1) / get_col(arr_percentage, 0))

        host_stat_log = """{:38}\t{}
        {:38}\t{}
        {:38}\t{}
        {:38}\t{}
        {:38}\t{}
        {:38}\t{}""".format('Statistics for host:', host,
                            'Total number of attempted connections:', num_attempted,
                            'Total number of acked connections:', num_acked,
                            'Total number of failed connections:', num_failed,
                            'Total number of replies received', num_synacked,
                            'Average establishment rate:', avg_estab_rate)

        logger.info("+" + '-'*50 + "+")
        logger.info(host_stat_log)
        logger.info("+" + '-'*50 + "+")

    # reset the logger config
    logger.setLevel(current_log_level)

    return client_percentage_connections
