# Agent activation language file containing procedure for magi experiment that will
# slowly increase the difficulty of puzzles over an 11-minute period, and log results

groups:
  attack_group: [attacknode-1, attacknode-2, attacknode-3, attacknode-4, attacknode-5,
                attacknode-6, attacknode-7, attacknode-8, attacknode-9, attacknode-10]
  server_group: &slist [servernode]
  client_group: [clientnode-1, clientnode-2, clientnode-3, clientnode-4, clientnode-5,
                clientnode-6, clientnode-7, clientnode-8, clientnode-9, clientnode-10,
                clientnode-11, clientnode-12, clientnode-13, clientnode-14, clientnode-15]

agents:
  # For running the main scripts on the server, clients, and attackers (the actual connection attempts
  # and sending/receiving of puzzles)
  main_server_agent:
    group: server_group
    path: /share/magi/modules/apache/apache.tar.gz # THIS MIGHT BE ACCURATE?
    execargs: []
  main_client_agent:
    group: client_group
    path: /share/magi/modules/http_client/http_client.tar.gz # NEED FILE PATH
    execargs: {servers: *slist, interval: 'expo(20)', sizes: '10000'}

  # nping for ack flood
  nping_agent:
    group: ack_flood_group
    path: /proj/ILLpuzzle/modules/runcmd/runcmd.tar.gz
    execargs: []

  change_difficulty_agent:
    group: server_group
    path: /proj/ILLpuzzle/modules/runcmd/runcmd.tar.gz # custom agent for running a command line argument
    execargs: []

  # For running the Python scripts to log CPU load, memory load, and puzzles sent/received
  log_server_agent:
    group: server_group
    path: # NEED FILE PATH OF PYTHON SCRIPT
    execargs: []
  log_client_agent:
    group: client_group
    path: # NEED FILE PATH OF PYTHON SCRIPT
    execargs: []
  log_attack_agent:
    group: attack_group
    path: # NEED FILE PATH OF PYTHON SCRIPT
    execargs: []

  # For running tcpdump on the server, clients, and attackers
  dump_server_agent:
    group: server_group
    path: /share/magi/modules/tcpdump/tcpdump.tar.gz
    execargs: [] # tcpdump takes no command line args
  dump_client_agent:
    group: client_group
    path: /share/magi/modules/tcpdump/tcpdump.tar.gz
    execargs: []
  dump_attack_agent:
    group: attack_group
    path: /share/magi/modules/tcpdump/tcpdump.tar.gz
    execargs: []

  # MIGHT NEED AN AGENT FOR #5 ON LIST OF THINGS TO LOG

# The mapping from the AAL procedure to the experiment apparatus
streamstarts: [serverstream, clientstream, attackstream, monitor, cleanupstream]

eventstreams:
  # 1. Server
  serverstream:

    # Start server and trigger serverStarted
    - type: event
      agent: server_agent
      method: startServer
      trigger: serverStarted
      args: {}

    # Increment difficulty 10 times with 1 minute intervals
    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 8" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}

    # Waits for the attack to start before starting first 60-second trigger
    - type: trigger
      triggers: [ { event: attackStarted } ]

    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 9" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 10" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 11" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 12" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 13" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 14" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 15" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 16" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 17" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: event
      agent: change_difficulty_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/set_difficulty.sh 18" }
    - type: event
      agent: change_difficulty_agent
      method: start
      args: {}
    - type: trigger
      triggers: [ { timeout: 60000 } ]

    - type: trigger
      triggers: [ { event: clientStopped} ]

    # Gets here after 16 minutes (after clientStopped triggers)
    - type: event
      agent: change_difficulty_agent
      method: stop
      args: {}
    - type: event
      agent: server_agent
      method: stopServer
      trigger: serverStopped
      args: {}

  # 2. Client
  clientstream:

    # Wait for serverStarted trigger (line 65)
    - type: trigger
      triggers: [ { event: serverStarted } ]

    # Start all client nodes through client_agent
    - type: event
      agent: client_agent
      method: startClient
      args: {}

    # Stops the client after 16 minutes, which then triggers the server to stop
    - type: trigger
      triggers: [ { timeout: 960000 } ]

    - type: event
      agent: client_agent
      method: stopClient
      trigger: clientStopped
      args: {}

  # 3. Attackers
  attackstream:
    - type: trigger
      triggers: [ { event: serverStarted } ]

    # Attack starts after 2 minutes
    - type: trigger
      triggers: [ { timeout: 120000 } ]

    - type: event
      agent: nping_agent
      method: setConfiguration
      trigger: attackStarted
      args: { cmdstring: "/proj/ILLpuzzle/scripts/run_ack_flood.sh" }

    - type: event
      agent: nping_agent
      method: start
      args: {}

    # Attack ends after 11 minutes
    - type: trigger
      triggers: [ { timeout: 660000 } ]

    - type: event
      agent: nping_agent
      method: setConfiguration
      args: { cmdstring: "/proj/ILLpuzzle/scripts/kill_ack_flood.sh" }

    # Starts the script that stops the ack flood
    - type: event
      agent: nping_agent
      method: start
      args: {}

    - type: event
      agent: nping_agent
      method: stop
      args: {}

  # All events necessary for logging
  monitor:
      # 1. Start collection for server, clients, and attackers
    - type: event
      agent: dump_server_agent
      method: startCollection
      args: { destination: "servernode", expression: "" }
    - type: event
      agent: dump_client_agent
      method: startCollection
      args: { destination: "clientnode-1", expression: "" }
    - type: event
      agent: dump_attack_agent
      method: startCollection
      args: { destination: "attacknode-1", expression: "" }

    - type: trigger
      triggers: [ { event: serverStopped } ]

      # 2 second delay after server stops
    - type: trigger
      triggers: [ { timeout: 2000 } ]

      # Next 3 events stop collection for server, clients, and attackers
    - type: event
      agent: dump_server_agent
      method: stopCollection
      trigger: serverCollectionStopped
      args: {}
    - type: trigger      # Forces these collection stops to be sequential
      triggers: [ {event: serverCollectionStopped} ]

    - type: event
      agent: dump_client_agent
      method: stopCollection
      trigger: clientCollectionStopped
      args: {}
    - type: trigger
      triggers: [ {event: clientCollectionStopped} ]

    - type: event
      agent: dump_attack_agent
      method: stopCollection
      trigger: attackCollectionStopped
      args: {}
    - type: trigger
      triggers: [ {event: attackCollectionStopped} ]

      # Next 3 events archive the tcp dumps for server, clients, and attackers
    - type: event
      agent: dump_server_agent
      method: archiveDump
      trigger: serverDumped
      args: { archivepath: /proj/ILLpuzzle/results/ }
    - type: trigger
      triggers: [ {event: serverDumped} ]

    - type: event
      agent: dump_client_agent
      method: archiveDump
      trigger: attackerDumped
      args: { archivepath: /proj/ILLpuzzle/results/ }
    - type: trigger
      triggers: [ {event: attackerDumped} ]

    - type: event
      agent: dump_attack_agent
      trigger: allFilesArchived # Triggers the cleanup stream
      method: archiveDump
      args: { archivepath: /proj/ILLpuzzle/results/ }

  # Exits
  cleanupstream:
    - type: trigger
      triggers: [ {event: allFilesArchived, target: exit} ]
